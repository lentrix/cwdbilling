/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lentrix.cwdbillingdisbursement;

import com.lentrix.cwdbillingdisbursement.models.AmountSummary;
import com.lentrix.cwdbillingdisbursement.models.Customer;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.ListIterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lentrix
 */
public class ReceiptEntryForm extends javax.swing.JDialog {
    LinkedList customers;
    Customer customer;
    /**
     * Creates new form ReceiptEntryForm
     */
    public ReceiptEntryForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jPanel1.setVisible(false);
        jPanel3.setVisible(false);
        recordPaymentButton.setVisible(false);
        //initialize customers
        initCustomers();
        initPaymentTable();
    }
    
    private void initPaymentTable() {
        Object[][] contents = {
            {"Current",""},
            {"Arrears CY",""},
            {"Arrears PY",""},
            {"Penalty",""},
            {"N.I",""},
            {"Recon",""},
            {"Reloc",""},
            {"PCA",""},
            {"Meter Sale",""},
            {"Others", ""},
            {"Less: ",""},
            {"  Sr. Citizen Disc.",""},
            {"  Loss Disc.",""},
            {"TOTAL",""}
        };
        String headers[] = {"Item","Amount"};
        
        DefaultTableModel model = new DefaultTableModel(contents, headers){
            @Override
            public void setValueAt(Object aValue, int row, int column) {
                float amount = Base.floatify(aValue);
                String txt = amount==0.00f?"":Base.currency(amount);
                super.setValueAt(txt, row, column); 
                if(row<13) {
                    recomputeTotals();
                }
            }

            private void recomputeTotals() {
                float total=0.0f;
                for(int i=0; i<10; i++) {
                    total += Base.floatify(super.getValueAt(i, 1));
                }
                total-= (Base.floatify(super.getValueAt(11,1)) + Base.floatify(super.getValueAt(12, 1)));
                String txt = Base.currency(total);
                super.setValueAt(txt, 13, 1);
                computeRunningBalance(total, Base.floatify(super.getValueAt(3, 1)));
            }
            
            @Override
            public boolean isCellEditable(int row, int column) {
                if(column==0) {
                    return false;
                }else {
                    return (row!=10 && row!=13);
                }
            }
            
        };
        
        paymentTable.setModel(model);
        paymentTable.getColumnModel().getColumn(1).setCellRenderer(Base.getRightRender());
    }
    
    private void computeRunningBalance(float total, float penalty) {
        try {
            Float rBal = customer.getRunningBalance();
            if(rBal==null && runningBalanceField.getText().isEmpty()) {
                Base.error("There was no running balance found.\nPlease manually provide value for running balance.", this);
                runningBalanceField.grabFocus();
            }else {
                runningBalanceField.setText(String.format("%.2f", rBal-(total-penalty)));
            }
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
            ex.printStackTrace();
        }
    }
    
    private void initCustomers() {
        try {
            customers = Customer.getAll(Base.getConnection(), "");
            ListIterator iter = customers.listIterator();
            customerList.removeAllItems();
            while(iter.hasNext()) {
                Customer c = (Customer)iter.next();
                customerList.addItem(c.getName());
            }
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        customerList = new javax.swing.JComboBox<String>();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        receiptNoField = new javax.swing.JTextField();
        dateField = new com.toedter.calendar.JDateChooser();
        recordPaymentButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        balancesTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        runningBalanceField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        selectedCustomerLabel = new javax.swing.JLabel();
        cashRadioButton = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Receipt Entry");

        jLabel1.setText("Select Customer:");

        customerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerListActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Payment Details:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Current", null},
                {"Arrears CY", null},
                {"Arrears PY", null},
                {"Penalty", null},
                {"N.I.", null},
                {"Recon", null},
                {"Reloc", null},
                {"PCA", null},
                {"Meter Sale", null},
                {"Less:", null},
                {"   Sr. Citizen Disc", null},
                {"   Loss Disc.", null},
                {"TOTAL", null}
            },
            new String [] {
                "Item", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(paymentTable);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel5.setText("Date:");

        jLabel6.setText("Receipt No.:");

        dateField.setDate(java.util.Date.from(Instant.now()));
        dateField.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(receiptNoField)
                    .addComponent(dateField, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(receiptNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        recordPaymentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/lentrix/cwdbillingdisbursement/icons/Save-icon24.png"))); // NOI18N
        recordPaymentButton.setText("Record Payment");
        recordPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordPaymentButtonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Balances:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 1, 1, 1));

        balancesTable.setBorder(null);
        balancesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Water Bill", null},
                {"N.I.", null},
                {"Recon", null},
                {"Reloc", null},
                {"PCA", null},
                {"Meter Sale", null},
                {"Others", null},
                {"TOTAL", null}
            },
            new String [] {
                "Item", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(balancesTable);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout(10, 0));

        jLabel3.setText("Running Balance:");
        jPanel4.add(jLabel3, java.awt.BorderLayout.WEST);
        jPanel4.add(runningBalanceField, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jButton2.setText("Proceed");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        selectedCustomerLabel.setText(" ");

        buttonGroup1.add(cashRadioButton);
        cashRadioButton.setSelected(true);
        cashRadioButton.setText("Cash");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Cheque");

        jLabel2.setText("Payment Type:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 146, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashRadioButton)
                        .addGap(133, 133, 133)
                        .addComponent(recordPaymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerList, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(selectedCustomerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedCustomerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recordPaymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashRadioButton)
                    .addComponent(jRadioButton2)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        customer = (Customer)customers.get(customerList.getSelectedIndex());
        selectedCustomerLabel.setText(customer.getName() + " Account # " + customer.getAcctNumber() + "  Zode: " + customer.getZone());
        try {
            AmountSummary billingSummary = customer.getBillingSummary();
            AmountSummary paymentSummary = customer.getPaymentSummary();
            
            AmountSummary balances = new AmountSummary();
            balances.setWaterBill(billingSummary.getWaterBill()-paymentSummary.getWaterBill());
            balances.setMeterSale(billingSummary.getMeterSale()-paymentSummary.getMeterSale());
            balances.setNi(billingSummary.getNi()-paymentSummary.getNi());
            balances.setOthers(billingSummary.getOthers()-paymentSummary.getOthers());
            balances.setPca(billingSummary.getPca()-paymentSummary.getPca());
            balances.setRecon(billingSummary.getRecon()-paymentSummary.getRecon());
            balances.setReloc(billingSummary.getReloc()-paymentSummary.getReloc());
            
            refreshBalancesTable(balances);
            
            jPanel1.setVisible(true);
            jPanel3.setVisible(true);
            recordPaymentButton.setVisible(true);
            
            receiptNoField.setText(String.format("%08d",getNextReceiptNumber()));
            
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private int getNextReceiptNumber() {
        try {
            ResultSet rs = Base.getConnection().createStatement().executeQuery("SELECT id FROM receipt ORDER BY id DESC LIMIT 0, 1");
            if(rs.first()) {
                return (rs.getInt("id") + 1);
            }else {
                return 0;
            }
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
            ex.printStackTrace();
            return 0;
        }
    }
    
    private void customerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerListActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_customerListActionPerformed

    private void recordPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordPaymentButtonActionPerformed
        //validate entry
        float pmtTotal = Base.floatify(paymentTable.getValueAt(13, 1));
        if(pmtTotal<=0) {
            Base.error("There seems to be a problem.\nWe detected that the total "
                    + "payment is a non-positive value."
                    + "\nPlease correct the entry and try again.", this);
            return;
        }
        
        try {
            PreparedStatement ps = Base.getConnection().prepareStatement(
                    "INSERT INTO receipt (date, customerId, current, arrearsCY, "
                            + "arrearsPY, penalty, ni, recon, reloc, pca, meterSale, others, "
                            + "srDisc, lossDisc, pmtType, id, runningBalance) VALUES "
                            + "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            java.sql.Date date = new java.sql.Date(dateField.getDate().getTime());            
            
            ps.setDate(1,  date);
            ps.setInt(2, customer.getId());
            ps.setFloat(3, Base.floatify(paymentTable.getValueAt(0, 1)));
            ps.setFloat(4, Base.floatify(paymentTable.getValueAt(1, 1)));
            ps.setFloat(5, Base.floatify(paymentTable.getValueAt(2, 1)));
            ps.setFloat(6, Base.floatify(paymentTable.getValueAt(3, 1)));
            ps.setFloat(7, Base.floatify(paymentTable.getValueAt(4, 1)));
            ps.setFloat(8, Base.floatify(paymentTable.getValueAt(5, 1)));
            ps.setFloat(9, Base.floatify(paymentTable.getValueAt(6, 1)));
            ps.setFloat(10, Base.floatify(paymentTable.getValueAt(7, 1)));
            ps.setFloat(11, Base.floatify(paymentTable.getValueAt(8, 1)));
            ps.setFloat(12, Base.floatify(paymentTable.getValueAt(9, 1)));
            ps.setFloat(13, Base.floatify(paymentTable.getValueAt(11, 1)));
            ps.setFloat(14, Base.floatify(paymentTable.getValueAt(12, 1)));
            ps.setString(15, cashRadioButton.isSelected()?"Cash":"Cheque");
            ps.setInt(16, Integer.parseInt(receiptNoField.getText()));
            ps.setFloat(17, Base.floatify(runningBalanceField.getText()));
            
            ps.executeUpdate();
            
            int response = JOptionPane.showConfirmDialog(this, "The payment transaction has been recorded successfully!"
                    + "\nPrint receipt?", "Print?", JOptionPane.YES_NO_OPTION);
            
            if(response==JOptionPane.YES_OPTION) {
                printReceipt();
            }
            this.dispose();
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_recordPaymentButtonActionPerformed
    
    private void printReceipt() {
        
    }
    
    private void refreshBalancesTable(AmountSummary balances) {
        
        Object[][] content = new Object[8][2];
        String[] headers = {"Item", "Amount"};
        content[0][0] = "Water Bill";
        content[0][1] = Base.currency(balances.getWaterBill());
        content[1][0] = "N.I.";
        content[1][1] = Base.currency(balances.getNi());
        content[2][0] = "Recon";
        content[2][1] = Base.currency(balances.getRecon());
        content[3][0] = "Reloc";
        content[3][1] = Base.currency(balances.getReloc());
        content[4][0] = "PCA";
        content[4][1] = Base.currency(balances.getPca());
        content[5][0] = "Meter Sale";
        content[5][1] = Base.currency(balances.getMeterSale());
        content[6][0] = "Others";
        content[6][1] = Base.currency(balances.getOthers());
        
        content[7][0] = "TOTAL";
        content[7][1] = Base.currency(balances.getTotal());
        
        DefaultTableModel model = new DefaultTableModel(content, headers){

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
        };
        
        balancesTable.setModel(model);
        balancesTable.getColumnModel().getColumn(1).setCellRenderer(Base.getRightRender());
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiptEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiptEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiptEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiptEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReceiptEntryForm dialog = new ReceiptEntryForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable balancesTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cashRadioButton;
    private javax.swing.JComboBox<String> customerList;
    private com.toedter.calendar.JDateChooser dateField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable paymentTable;
    private javax.swing.JTextField receiptNoField;
    private javax.swing.JButton recordPaymentButton;
    private javax.swing.JTextField runningBalanceField;
    private javax.swing.JLabel selectedCustomerLabel;
    // End of variables declaration//GEN-END:variables
}
