/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lentrix.cwdbillingdisbursement;

import com.lentrix.cwdbillingdisbursement.models.Billing;
import com.lentrix.cwdbillingdisbursement.models.Customer;
import com.lentrix.cwdbillingdisbursement.models.User;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.util.LinkedList;
import java.util.ListIterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lentrix
 */
public class MeterReadingAdjustments extends javax.swing.JDialog {
    private String[] mos = {"", "January", "February", "March", "April", "May", "June",
            "July","August", "September", "October", "November", "December"
        };
    private User user; 
    /**
     * Creates new form MeterReadingAdjustments
     */
    public MeterReadingAdjustments(java.awt.Frame parent, boolean modal, User user) {
        super(parent, modal);
        this.user = user;
        initComponents();
        initCustomers();
        //init year
        java.time.LocalDate date = java.time.LocalDate.now();
        yearField.setText(String.valueOf(date.getYear()));
    }
    
    private void initCustomers() {
        try {
            LinkedList customers = Customer.getAll(Base.getConnection(), "");
            ListIterator iter = customers.listIterator();
            while(iter.hasNext()) {
                customerComboBox.addItem(iter.next());
            }
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
            ex.printStackTrace();
        }
            
    }
    
    private void populateTable() {
        Object contents[][] = new Object[12][5];
        String[] header = {"Month", "Previous", "Reading", "Consumed", "Amount"};
        
        for(int i=1; i<=12; i++) {
            try {
                Billing billing = Billing.load((Customer)customerComboBox.getSelectedItem(), 
                        Integer.parseInt(yearField.getText()), i);
                contents[i-1][0] = i;
                if(billing!=null) {
                    
                    contents[i-1][1] = billing.getPrevious();
                    contents[i-1][2] = billing.getReading();
                    contents[i-1][3] = billing.getConsumption();
                    contents[i-1][4] = billing.getAmount();
                    
                }
            }catch(SQLException ex) {
                Base.error(ex.getMessage(), this);
                ex.printStackTrace();
            }
        }
        
        DefaultTableModel model = new DefaultTableModel(contents, header){

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
        };
        
        table.setModel(model);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        customerComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        yearField = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Meter Reading Adjustments");

        jLabel1.setText("Customer:");

        jLabel2.setText("Year:");

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        saveButton.setText("Save Changes");

        cancelButton.setText("Cancel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                        .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_goButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        try {
            int year = Integer.parseInt(yearField.getText());
            int month = table.getSelectedRow()+1;
            Customer customer = (Customer)customerComboBox.getSelectedItem();
            Billing billing;
            if(evt.getClickCount()==2){
                if(Billing.exists(year, month, customer.getId())) {
                    billing = Billing.load(customer, year, month);
                }else {
                    int resp = JOptionPane.showConfirmDialog(this, 
                            "We detected that there is no billing for " + customer.getName() 
                                    + "\nfor the month of " + mos[month] + "."
                                    + "\nDo you want to create the billing?", 
                            "Create?",JOptionPane.YES_NO_OPTION
                    );
                    if(resp == JOptionPane.YES_OPTION) {
                        billing = new Billing();
                        billing.setCustomer(customer);
                        billing.setMonth(month);
                        billing.setYear(year);
                        int billDateYear = Integer.parseInt(JOptionPane.showInputDialog("Enter billing date year: "));
                        int billDateMonth = Integer.parseInt(JOptionPane.showInputDialog("Enter billing date month: "));
                        int billDateDay = Integer.parseInt(JOptionPane.showInputDialog("Enter billing date day: "));
                        LocalDate billDate = LocalDate.of(billDateYear, billDateMonth, billDateDay);
                        billing.setDateBilled(java.sql.Date.valueOf(billDate));
                        
                    }else {
                        return;
                    }
                }
                
                int reading = Integer.parseInt(JOptionPane.showInputDialog("Enter reading"));
                Billing prev = billing.getPreviousBilling();
                Billing next = billing.getNextBilling();
                
                billing.setReading(reading);
                billing.setAmount(Base.computeAmount(billing.getConsumption()));
                if(prev!=null) billing.setPrevious(prev.getReading());
                if(next!=null) {
                    next.setPrevious(reading);
                    next.setAmount(Base.computeAmount(next.getConsumption()));
                }
                
                billing.save(user);
                if(prev!=null) prev.save(user);
                if(next!=null) next.save(user);
                populateTable();
            }
        }catch(NumberFormatException ex) {
            Base.error("The value you entered is not a number", this);
        }catch(SQLException ex) {
            Base.error(ex.getMessage(), this);
        }
    }//GEN-LAST:event_tableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox customerComboBox;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable table;
    private javax.swing.JTextField yearField;
    // End of variables declaration//GEN-END:variables
}
